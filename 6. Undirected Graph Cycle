import java.util.*;

class Pair {
    int node;
    int parent;

    Pair(int node, int parent) {
        this.node = node;
        this.parent = parent;
    }
}

class Solution {

    public boolean detect(int src, List<List<Integer>> adj, int[] vis) {
        vis[src] = 1;
        Queue<Pair> q = new LinkedList<>();
        q.add(new Pair(src, -1));

        while (!q.isEmpty()) {
            int node = q.peek().node;
            int parent = q.peek().parent;
            q.remove();

            for (int adjNode : adj.get(node)) {
                if (vis[adjNode] == 0) {
                    vis[adjNode] = 1;
                    q.add(new Pair(adjNode, node));
                } else if (adjNode != parent) {
                    return true; // Cycle detected
                }
            }
        }

        return false;
    }

    public boolean isCycle(int V, int[][] edges) {
        List<List<Integer>> adj = new ArrayList<>();

        // Step 1: Initialize adjacency list
        for (int i = 0; i < V; i++) {
            adj.add(new ArrayList<>());
        }

        // Step 2: Build the adjacency list from edge list
        for (int[] edge : edges) {
            int u = edge[0];
            int v = edge[1];
            adj.get(u).add(v);
            adj.get(v).add(u); // undirected graph
        }

        int[] vis = new int[V];

        // Step 3: Check each component
        for (int i = 0; i < V; i++) {
            if (vis[i] == 0) {
                if (detect(i, adj, vis)) return true;
            }
        }

        return false;
    }
}
