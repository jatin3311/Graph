class Solution {
    public int[][] floodFill(int[][] image, int sr, int sc, int color) {
        int n = image.length;
        int m = image[0].length;
        int [][]visited = new int[n][m];

        for (int i = 0; i<n; i++){
            for (int j = 0; j<m; j++){
                visited[i][j] = image[i][j];
            }
        }
        int col = image[sr][sc];

        if (col != color){
            DFS(visited, sr, sc, color, col);
        }
        
        return visited;
    }
    public void DFS(int [][]visited, int sr, int sc, int color, int col){
        int n = visited.length;
        int m = visited[0].length;

        if(visited[sr][sc] != col){
            return;
        }

        
        visited[sr][sc] = color;
        

        if(sc-1 >= 0 && sr<n && sr>=0){
            DFS(visited, sr, sc - 1, color, col);
        }

        if(sc + 1 < m && sr<n && sr>=0){
            DFS(visited, sr, sc + 1, color, col);
        }

        if(sc>=0 && sc<m  && sr - 1 >= 0){
            DFS(visited, sr - 1, sc, color, col);
        }

        if(sc>=0 && sc<m  && sr + 1 < n){
            DFS(visited, sr + 1, sc, color, col);
        }
        
    }
}


                                                    OR



class Solution {
    public int[][] floodFill(int[][] image, int sr, int sc, int color) {
        int inCol = image[sr][sc];
        int [][] ans = image;
        int []dRow = {0, -1, 0, +1};
        int []dCol = {-1, 0, +1, 0};
        DFS(image, sr, sc, color, inCol, dRow, dCol, ans);
        return ans;
    }
    public void DFS(int[][] image, int sr, int sc, int newColor,int inCol, int []dRow, int []dCol, int [][]ans){


        int n = image.length;
        int m = image[0].length; 

        ans[sr][sc] = newColor;

        for (int i = 0; i<4; i++){
            int nRow = sr + dRow[i];
            int nCol = sc + dCol[i];
            if(nRow >= 0 && nRow<n && nCol >= 0 && nCol<m && image[nRow][nCol] == inCol && ans[nRow][nCol] != newColor){
                DFS( image, nRow, nCol, newColor, inCol, dRow, dCol, ans);
            }
        }


    }
}
