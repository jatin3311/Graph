class Solution {
    public int findCircleNum(int[][] isConnected) {
        int n = isConnected.length;
        
        ArrayList<ArrayList<Integer>> adjLs = new ArrayList<>();
        for(int i = 0; i<n; i++){
            adjLs.add(new ArrayList<>());
        }
        for (int i = 0; i<n; i++){
            for (int j = 0; j<n; j++){
                if(isConnected[i][j] == 1 && i != j){
                    adjLs.get(i).add(j);
                    adjLs.get(j).add(i);
                }

            }
        }
        int []visited = new int[n];
        int count = 0;
        for (int i = 0; i<n; i++){
            if(visited[i] == 0){
                count++;
                dfs(i, adjLs, visited);
            }
        }
        return count;
    }
    public void dfs(int i, ArrayList<ArrayList<Integer>> adjLs, int[] visited){

        visited[i] = 1;
        for (int j = 0; j<adjLs.get(i).size(); j++){
            if(visited[adjLs.get(i).get(j)]==0){
                dfs(adjLs.get(i).get(j), adjLs, visited);
            }
        }
    }
}
