class Solution {
    // Function to return a list containing the DFS traversal of the graph.
    public ArrayList<Integer> dfs(ArrayList<ArrayList<Integer>> adj) {
        // Code here
        int n = adj.size();
        ArrayList<Integer> ans= new ArrayList<Integer>();
        boolean []visited = new boolean[n];
        
        dfs(0, adj, ans, visited);
        return ans;
    }
    public void dfs(int node, ArrayList<ArrayList<Integer>> adj, ArrayList<Integer> ans, boolean []visited){
        
        visited[node] = true;
        ans.add(node);
        
        for (int i = 0; i<adj.get(node).size(); i++){
            int nextNode = adj.get(node).get(i);
            if(visited[nextNode] == false){
                dfs(nextNode, adj, ans, visited);
            }
        }
    }
}