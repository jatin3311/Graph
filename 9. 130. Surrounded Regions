class Solution {
    public void dfs(char [][]board, int[][]vis, int i ,int j, int []drow, int []dcol){
        vis[i][j] = 1;
        int n = board.length;
        int m = board[0].length;

        for(int l = 0; l<4; l++){
            int nrow = i + drow[l];
            int ncol = j + dcol[l];
            if(nrow >= 0 && nrow < n && ncol >= 0 && ncol <m && vis[nrow][ncol] == 0 && board[nrow][ncol] == 'O'){
                dfs(board, vis, nrow, ncol, drow, dcol);
            }
        }
        
    }

    public void solve(char[][] board) {
        int n = board.length;
        int m = board[0].length;
        int [][]vis = new int[n][m];

        int []drow ={-1, 0, +1, 0};
        int []dcol = {0, 1, 0, -1};

        for(int j = 0; j<m; j++){
            if(vis[0][j] == 0 && board[0][j] == 'O'){
                dfs(board, vis, 0, j, drow, dcol);
            }
            if(vis[n-1][j] == 0 && board[n-1][j] == 'O'){
                 dfs(board, vis, n-1, j, drow, dcol);
            }
        }

        for(int i = 0; i<n; i++){
            if(vis[i][0] == 0 && board[i][0] == 'O'){
                dfs(board, vis, i, 0, drow, dcol);
            }
            if(vis[i][m-1] == 0 && board[i][m-1] == 'O'){
                 dfs(board, vis, i, m-1, drow, dcol);
            }
        }

        for(int i = 0; i<n; i++){
            for(int j = 0; j<m; j++){
                if(vis[i][j] == 0 && board[i][j] == 'O'){
                    board[i][j] = 'X';
                }
            }
        }
        
    }
}
